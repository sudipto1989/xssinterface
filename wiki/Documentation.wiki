#summary Documentation for xssinterface

= Introduction =

xssinterface enables websites to expose a certain set of javascript callback methods to pages residing on different domains. The site specifies which methods may be called as well as which domains are allowed to call the methods.

= Synopsis =

Place this on the container page (which in this example resides on www.caller.com):

{{{
function sayHello() {
	var caller = new XSSInterface.Caller("www.listener.com","/xssinterface/html/cookie_setter.html","channel1");
	caller.call("hello", "Hello World")
}
}}}

Place this in the widget or iframe (which in this examples resides on www.listener.com):

{{{
window.xssListener = new XSSInterface.Listener("1234567890","channel1");
window.xssListener.allowDomain("www.caller.com", "/xssinterface/html/cookie_setter.html", "/xssinterface/js/gears_listener.js");


window.xssListener.registerCallback("hello", function (msg) { $('output').value = msg} )
window.xssListener.startEventLoop()
}}}

[http://www.avantaxx.de/xssinterface/examples/basic/ Example]

= How it works? =

For Browsers that support it, we use the [http://developer.mozilla.org/en/docs/DOM:window.postMessage postMessage()] interface.

If the Browser has [http://gears.google.com Google Gears] installed, we use [http://code.google.com/apis/gears/api_workerpool.html Gears cross origin workers].

For all other browsers, we use the following mechanism:

All sites that participate in the cross domain calls must provide an html file (cookie_setter.html) that is provided by this library that enables other domains to place certain cookie under the domain of the site.

The library uses this mechanism to place cookies on the target domain that are then read and evaluated by the target page.

Pages must explicitly grant access to their domain by setting a security token cookie under a domain that is allowed to access the callbacks.

= Usage =

Lets assume the following:

http://www.one.com hosts an iframe located at
http://www.two.com 

The following URLs return the file cookie_setter.html from this library:

* http://www.one.com/cookie_setter.html
* http://www.and.com/cookie_setter.html

You might need to edit the file cookie_setter.html to integrate the correct javascript file locations.

== Caller Side ==

The following function calls the message "hello" with the parameter "Hello World" on the domain www.two.com:

{{{
function sayHello() {
	var caller = new XSSInterface.Caller("www.two.com","/cookie_setter.html","channel1");
	caller.call("hello", "Hello World")
}
}}}

== Listener Side ==

We register an onload-handler that creates a cross domain message listener:

{{{
window.onload = function () {
	window.xssListener = new XSSInterface.Listener("1234567890","channel1");
	window.xssListener.allowDomain("www.one.com", "/cookie_setter.html");

	window.xssListener.registerCallback("hello", function (msg) {alert(msg)} )
window.xssListener.startEventLoop()
}
}}}

The listener defined a security token (123456789). This should be a cryptographically secure hash such as a hash of the users session id. Do not use the session id directly, because the token will be communicated to other domains. The parameter "channel1" tells the listener to respond only to messages on channel1.

The call to allowDomain() allows www.one.com to call methods on this listener. The second parameter tells the listener where it finds the cookie_setter.html on www.one.com.

registerCallback() registers a callback called "hello" that shows an alert box with its parameter when called.

And finally startEventLoop() tells the listener to start listening for calls.

= Further Reading =

 * [Security]
 * BrowserIssues
 * [http://code.google.com/p/xssinterface/source/browse/trunk/js/xssinterface.js The Source]